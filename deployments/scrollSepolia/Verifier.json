{
  "address": "0xA39e0B1Ac857596Ca04c06543AA8449504E3051a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[1]",
          "name": "_pubSignals",
          "type": "uint256[1]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf283bb2531b7561cf8c03eac913eb8d8d4607331456c678e7a399246ff6fc845",
  "receipt": {
    "to": null,
    "from": "0x20217905650216527f63FAC692341C6fD40CC5D4",
    "contractAddress": "0xA39e0B1Ac857596Ca04c06543AA8449504E3051a",
    "transactionIndex": 0,
    "gasUsed": "388041",
    "logsBloom": "0x
    "blockHash": "0x63e7a3474eab2bc2adb4dfe510064587634064fb5a220a8099c1da1cd1f648c7",
    "transactionHash": "0xf283bb2531b7561cf8c03eac913eb8d8d4607331456c678e7a399246ff6fc845",
    "logs": [],
    "blockNumber": 5937430,
    "cumulativeGasUsed": "388041",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "e9387790268813b7e481ddd23050ed86",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 4115120360794282869706859014299984459736128276316467153512581954184056335492;\\n    uint256 constant alphay  = 11001159114096060882346732967669750065371862657744830975666647281082820286026;\\n    uint256 constant betax1  = 5455102772661898342079416022286009623108103084340883981071176666107091416728;\\n    uint256 constant betax2  = 9523962938375842720394774490755795973262940197038810726360765364959124052328;\\n    uint256 constant betay1  = 17477514823761108829014977814303904614064565128347940444620220210514574255950;\\n    uint256 constant betay2  = 12565548160897375738351107983453535294636839015917537294080661578266169847891;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 7603712514656459107383200398381625286822544356252421064060403855291892836981;\\n    uint256 constant deltax2 = 5902129311013779910994395652139983733055526147924529651470213593765019525078;\\n    uint256 constant deltay1 = 14373542408144263997909915570401251226940847257756628565650520239122473995984;\\n    uint256 constant deltay2 = 14496688827991530864630101590219158497912910785912970487291848889714787912975;\\n\\n    \\n    uint256 constant IC0x = 15930722930107881634114268361735612167165755059062668047764517776514926016893;\\n    uint256 constant IC0y = 12702642520545911240914719513715929849268147215189111755545963954830613730758;\\n    \\n    uint256 constant IC1x = 19793838417640825979414162988436673792565357332524679040063503827069011407606;\\n    uint256 constant IC1y = 11980147156463357245012964781746595827482005498528702647622582897403339831022;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\\n\",\"keccak256\":\"0x8ba107a57f42a6d725e312c67dd47a5e9dbdc69e502a48466c253cf2598ab8a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061060e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f2338783ac5c4b80f8bd30919f76c467f70b30705339edeb503582b95b704797d81527f1c1570ddac0340bad0c7317fa772caaf9f3ceeec1544e6fb4f6660906f04d5c660208201526101a960008801357f1a7c85e3305e92947eab759d6f782073353879c7ca57e26af625177073e976ee7f2bc2ea600b54d69e12792b2dedce2984b701edd686453103d9bd272ba642b2f68461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f0919135987e0ab97ae5c67472e9b247729b97c46727f8f6f35fc928828daec8460c08301527f18526f7681c830fc532d9bef7328f742dd3495eba95a15706bdb8eaffedd564a60e08301527f0c0f7a8f91e4a6c9089e4ee40023861b0efa8b6c40c55b773e30729e67e4f6986101008301527f150e5f3b1974100d51cf51a4708ec390d02051d16c70e13d507d24ede87ed9686101208301527f26a3ec3ed48b73fab5f474879343116c9f335b78eb7b103ba5311edf00b1274e6101408301527f1bc7d925406892159798963ff4df3207482f4355aeaacdc8c567b531062c3053610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f10cf8c7c4633b68a6e6e4214c7ea281bacf93d4f04bc93ab9c15bdf1965f2a756102808301527f0d0c7c9f6cf748a53aef54767081cfd6900923bccd3a911181985e460db21fd66102a08301527f1fc722ff1315d617b4724f0bef72951c2b4aecea4718ff0de340bd616c5aced06102c08301527f200cd5c9a7648e8428d9523ce8bf5b9d28306626eb02b9e27330cc0d42768d0f6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212205661f7bf6bad116c213914584c4d6634848c8a411241e6382880d948d9c5932764736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f2338783ac5c4b80f8bd30919f76c467f70b30705339edeb503582b95b704797d81527f1c1570ddac0340bad0c7317fa772caaf9f3ceeec1544e6fb4f6660906f04d5c660208201526101a960008801357f1a7c85e3305e92947eab759d6f782073353879c7ca57e26af625177073e976ee7f2bc2ea600b54d69e12792b2dedce2984b701edd686453103d9bd272ba642b2f68461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f0919135987e0ab97ae5c67472e9b247729b97c46727f8f6f35fc928828daec8460c08301527f18526f7681c830fc532d9bef7328f742dd3495eba95a15706bdb8eaffedd564a60e08301527f0c0f7a8f91e4a6c9089e4ee40023861b0efa8b6c40c55b773e30729e67e4f6986101008301527f150e5f3b1974100d51cf51a4708ec390d02051d16c70e13d507d24ede87ed9686101208301527f26a3ec3ed48b73fab5f474879343116c9f335b78eb7b103ba5311edf00b1274e6101408301527f1bc7d925406892159798963ff4df3207482f4355aeaacdc8c567b531062c3053610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f10cf8c7c4633b68a6e6e4214c7ea281bacf93d4f04bc93ab9c15bdf1965f2a756102808301527f0d0c7c9f6cf748a53aef54767081cfd6900923bccd3a911181985e460db21fd66102a08301527f1fc722ff1315d617b4724f0bef72951c2b4aecea4718ff0de340bd616c5aced06102c08301527f200cd5c9a7648e8428d9523ce8bf5b9d28306626eb02b9e27330cc0d42768d0f6102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212205661f7bf6bad116c213914584c4d6634848c8a411241e6382880d948d9c5932764736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}