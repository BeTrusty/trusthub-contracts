{
  "0x0f842383dee2cf04cf844b758f33fba8367d84c2c27ae437bab8cbffadb2f117": {
    "name": "Verifier",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Verifier",
      "sourceName": "contracts/Verifier.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256[2]",
              "name": "_pA",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[2][2]",
              "name": "_pB",
              "type": "uint256[2][2]"
            },
            {
              "internalType": "uint256[2]",
              "name": "_pC",
              "type": "uint256[2]"
            },
            {
              "internalType": "uint256[1]",
              "name": "_pubSignals",
              "type": "uint256[1]"
            }
          ],
          "name": "verifyProof",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b5061060e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f0476e0f39a71253c7d22522f38c0b77bb7185baed23dbeaaa0d6b9cbb055b50781527f21f0783ef18bd57e76fcd22cdadc1f0d2c930cf1d3a3060adb0c469d0d237ef760208201526101a960008801357f2e04fe98a7220dab24fa435c95b7f14e092d2dc17484ed95cac72109b8beca367f2c4e7903a89183bc593a63e761c390944a576ff6a92ad2e2755105a16e3d89478461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f12d62daa1d711c0ed6155171ce764f91f64db1c9d54953369fc5a00efe779be560c08301527f179173cc819d3c2559f22761e759b5cd80737fdc209ade9fe7ef7cc927c3b38560e08301527f30601bbe058fb1fb7d66ecb440bdb41e3c24ccbf0b8423f9a8439d965fc7c3346101008301527f2a39fc98d850754027794bdf02b4ea6511d395c965a83f762d472855e0c58be96101208301527f121b9969a31c13720093cec576f9f67ecdeb95dc7b0a8a0dc9fc4f5122967a876101408301527f1aedb1b574d9124fb62e355f3a553989bd7242e2395d13cac0d0d48b3ea3560f610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0f941f46d4414d627baa603b4e02d3228de9ad1a96dd4c9c14af92058f7a62c36102808301527f095217b374207aa5bddf6149503a1c1e7f57401a606d74f4bd1024a7cb0c81bc6102a08301527f23004453cf1454c42c99591bd1f987fba2570ed4611886a7d339184762fac5636102c08301527f155d01bad349070c66cf8e5bac25b358c24a30b5761d94125c75a0aef4090d716102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212202021ae0639f8b5e33688f45da4473cd162209312d76899906c4725a56d47af3f64736f6c63430008180033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f0476e0f39a71253c7d22522f38c0b77bb7185baed23dbeaaa0d6b9cbb055b50781527f21f0783ef18bd57e76fcd22cdadc1f0d2c930cf1d3a3060adb0c469d0d237ef760208201526101a960008801357f2e04fe98a7220dab24fa435c95b7f14e092d2dc17484ed95cac72109b8beca367f2c4e7903a89183bc593a63e761c390944a576ff6a92ad2e2755105a16e3d89478461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f12d62daa1d711c0ed6155171ce764f91f64db1c9d54953369fc5a00efe779be560c08301527f179173cc819d3c2559f22761e759b5cd80737fdc209ade9fe7ef7cc927c3b38560e08301527f30601bbe058fb1fb7d66ecb440bdb41e3c24ccbf0b8423f9a8439d965fc7c3346101008301527f2a39fc98d850754027794bdf02b4ea6511d395c965a83f762d472855e0c58be96101208301527f121b9969a31c13720093cec576f9f67ecdeb95dc7b0a8a0dc9fc4f5122967a876101408301527f1aedb1b574d9124fb62e355f3a553989bd7242e2395d13cac0d0d48b3ea3560f610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0f941f46d4414d627baa603b4e02d3228de9ad1a96dd4c9c14af92058f7a62c36102808301527f095217b374207aa5bddf6149503a1c1e7f57401a606d74f4bd1024a7cb0c81bc6102a08301527f23004453cf1454c42c99591bd1f987fba2570ed4611886a7d339184762fac5636102c08301527f155d01bad349070c66cf8e5bac25b358c24a30b5761d94125c75a0aef4090d716102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212202021ae0639f8b5e33688f45da4473cd162209312d76899906c4725a56d47af3f64736f6c63430008180033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b5061060e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f0476e0f39a71253c7d22522f38c0b77bb7185baed23dbeaaa0d6b9cbb055b50781527f21f0783ef18bd57e76fcd22cdadc1f0d2c930cf1d3a3060adb0c469d0d237ef760208201526101a960008801357f2e04fe98a7220dab24fa435c95b7f14e092d2dc17484ed95cac72109b8beca367f2c4e7903a89183bc593a63e761c390944a576ff6a92ad2e2755105a16e3d89478461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f12d62daa1d711c0ed6155171ce764f91f64db1c9d54953369fc5a00efe779be560c08301527f179173cc819d3c2559f22761e759b5cd80737fdc209ade9fe7ef7cc927c3b38560e08301527f30601bbe058fb1fb7d66ecb440bdb41e3c24ccbf0b8423f9a8439d965fc7c3346101008301527f2a39fc98d850754027794bdf02b4ea6511d395c965a83f762d472855e0c58be96101208301527f121b9969a31c13720093cec576f9f67ecdeb95dc7b0a8a0dc9fc4f5122967a876101408301527f1aedb1b574d9124fb62e355f3a553989bd7242e2395d13cac0d0d48b3ea3560f610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0f941f46d4414d627baa603b4e02d3228de9ad1a96dd4c9c14af92058f7a62c36102808301527f095217b374207aa5bddf6149503a1c1e7f57401a606d74f4bd1024a7cb0c81bc6102a08301527f23004453cf1454c42c99591bd1f987fba2570ed4611886a7d339184762fac5636102c08301527f155d01bad349070c66cf8e5bac25b358c24a30b5761d94125c75a0aef4090d716102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212202021ae0639f8b5e33688f45da4473cd162209312d76899906c4725a56d47af3f64736f6c63430008180033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x60E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x43753B4D EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x539 JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x48D JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP2 LT PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE DUP6 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP2 PUSH1 0x60 DUP4 PUSH1 0x7 PUSH2 0x7D0 GAS SUB STATICCALL SWAP2 POP DUP2 PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x40 DUP4 PUSH1 0x80 DUP4 PUSH1 0x6 PUSH2 0x7D0 GAS SUB STATICCALL SWAP2 POP DUP2 PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP7 ADD PUSH1 0x0 DUP8 ADD PUSH32 0x476E0F39A71253C7D22522F38C0B77BB7185BAED23DBEAAA0D6B9CBB055B507 DUP2 MSTORE PUSH32 0x21F0783EF18BD57E76FCD22CDADC1F0D2C930CF1D3A3060ADB0C469D0D237EF7 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1A9 PUSH1 0x0 DUP9 ADD CALLDATALOAD PUSH32 0x2E04FE98A7220DAB24FA435C95B7F14E092D2DC17484ED95CAC72109B8BECA36 PUSH32 0x2C4E7903A89183BC593A63E761C390944A576FF6A92AD2E2755105A16E3D8947 DUP5 PUSH2 0x9B JUMP JUMPDEST DUP4 CALLDATALOAD DUP3 MSTORE PUSH32 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD47 PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH32 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD47 SUB MOD PUSH1 0x20 DUP4 ADD MSTORE DUP5 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH32 0x12D62DAA1D711C0ED6155171CE764F91F64DB1C9D54953369FC5A00EFE779BE5 PUSH1 0xC0 DUP4 ADD MSTORE PUSH32 0x179173CC819D3C2559F22761E759B5CD80737FDC209ADE9FE7EF7CC927C3B385 PUSH1 0xE0 DUP4 ADD MSTORE PUSH32 0x30601BBE058FB1FB7D66ECB440BDB41E3C24CCBF0B8423F9A8439D965FC7C334 PUSH2 0x100 DUP4 ADD MSTORE PUSH32 0x2A39FC98D850754027794BDF02B4EA6511D395C965A83F762D472855E0C58BE9 PUSH2 0x120 DUP4 ADD MSTORE PUSH32 0x121B9969A31C13720093CEC576F9F67ECDEB95DC7B0A8A0DC9FC4F5122967A87 PUSH2 0x140 DUP4 ADD MSTORE PUSH32 0x1AEDB1B574D9124FB62E355F3A553989BD7242E2395D13CAC0D0D48B3EA3560F PUSH2 0x160 DUP4 ADD MSTORE PUSH1 0x0 DUP9 ADD MLOAD PUSH2 0x180 DUP4 ADD MSTORE PUSH1 0x20 PUSH1 0x0 ADD DUP9 ADD MLOAD PUSH2 0x1A0 DUP4 ADD MSTORE PUSH32 0x198E9393920D483A7260BFB731FB5D25F1AA493335A9E71297E485B7AEF312C2 PUSH2 0x1C0 DUP4 ADD MSTORE PUSH32 0x1800DEEF121F1E76426A00665E5C4479674322D4F75EDADD46DEBD5CD992F6ED PUSH2 0x1E0 DUP4 ADD MSTORE PUSH32 0x90689D0585FF075EC9E99AD690C3395BC4B313370B38EF355ACDADCD122975B PUSH2 0x200 DUP4 ADD MSTORE PUSH32 0x12C85EA5DB8C6DEB4AAB71808DCB408FE3D1E7690C43D37B4CE6CC0166FA7DAA PUSH2 0x220 DUP4 ADD MSTORE DUP6 CALLDATALOAD PUSH2 0x240 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x260 DUP4 ADD MSTORE PUSH32 0xF941F46D4414D627BAA603B4E02D3228DE9AD1A96DD4C9C14AF92058F7A62C3 PUSH2 0x280 DUP4 ADD MSTORE PUSH32 0x95217B374207AA5BDDF6149503A1C1E7F57401A606D74F4BD1024A7CB0C81BC PUSH2 0x2A0 DUP4 ADD MSTORE PUSH32 0x23004453CF1454C42C99591BD1F987FBA2570ED4611886A7D339184762FAC563 PUSH2 0x2C0 DUP4 ADD MSTORE PUSH32 0x155D01BAD349070C66CF8E5BAC25B358C24A30B5761D94125C75A0AEF4090D71 PUSH2 0x2E0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH2 0x300 DUP5 PUSH1 0x8 PUSH2 0x7D0 GAS SUB STATICCALL DUP3 MLOAD DUP2 AND SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x380 DUP2 ADD PUSH1 0x40 MSTORE PUSH2 0x4A5 PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH2 0x67 JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x67 JUMP JUMPDEST PUSH2 0x4BF DUP2 DUP5 DUP7 DUP9 DUP11 PUSH2 0x106 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP3 PUSH1 0x20 PUSH1 0x2 MUL DUP3 ADD GT ISZERO PUSH2 0x4EF JUMPI PUSH2 0x4EE PUSH2 0x4CE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP3 PUSH1 0x40 PUSH1 0x2 MUL DUP3 ADD GT ISZERO PUSH2 0x511 JUMPI PUSH2 0x510 PUSH2 0x4CE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP3 PUSH1 0x20 PUSH1 0x1 MUL DUP3 ADD GT ISZERO PUSH2 0x533 JUMPI PUSH2 0x532 PUSH2 0x4CE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x554 JUMPI PUSH2 0x553 PUSH2 0x4C9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x562 DUP8 DUP3 DUP9 ADD PUSH2 0x4D3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x573 DUP8 DUP3 DUP9 ADD PUSH2 0x4F5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xC0 PUSH2 0x584 DUP8 DUP3 DUP9 ADD PUSH2 0x4D3 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x100 PUSH2 0x596 DUP8 DUP3 DUP9 ADD PUSH2 0x517 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B7 DUP2 PUSH2 0x5A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5D2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0x21 0xAE MOD CODECOPY 0xF8 0xB5 0xE3 CALLDATASIZE DUP9 DELEGATECALL TSTORE LOG4 SELFBALANCE EXTCODECOPY 0xD1 PUSH3 0x209312 0xD7 PUSH9 0x99906C4725A56D47AF EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ",
          "sourceMap": "831:6299:9:-:0;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@verifyProof_1361": {
              "entryPoint": 96,
              "id": 1361,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptr": {
              "entryPoint": 1269,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_uint256_$1_calldata_ptr": {
              "entryPoint": 1303,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_uint256_$2_calldata_ptr": {
              "entryPoint": 1235,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_array$_t_uint256_$2_calldata_ptrt_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptrt_array$_t_uint256_$2_calldata_ptrt_array$_t_uint256_$1_calldata_ptr": {
              "entryPoint": 1337,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 1454,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": 1469,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": 1442,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
              "entryPoint": 1230,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 1225,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:2751:10",
                "nodeType": "YulBlock",
                "src": "0:2751:10",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "47:35:10",
                      "nodeType": "YulBlock",
                      "src": "47:35:10",
                      "statements": [
                        {
                          "nativeSrc": "57:19:10",
                          "nodeType": "YulAssignment",
                          "src": "57:19:10",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "73:2:10",
                                "nodeType": "YulLiteral",
                                "src": "73:2:10",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "67:5:10",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:10"
                            },
                            "nativeSrc": "67:9:10",
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:10"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "57:6:10",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:10"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "7:75:10",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "40:6:10",
                        "nodeType": "YulTypedName",
                        "src": "40:6:10",
                        "type": ""
                      }
                    ],
                    "src": "7:75:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "177:28:10",
                      "nodeType": "YulBlock",
                      "src": "177:28:10",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "194:1:10",
                                "nodeType": "YulLiteral",
                                "src": "194:1:10",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "197:1:10",
                                "nodeType": "YulLiteral",
                                "src": "197:1:10",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "187:6:10",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:10"
                            },
                            "nativeSrc": "187:12:10",
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:10"
                          },
                          "nativeSrc": "187:12:10",
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:10"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "88:117:10",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "300:28:10",
                      "nodeType": "YulBlock",
                      "src": "300:28:10",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "317:1:10",
                                "nodeType": "YulLiteral",
                                "src": "317:1:10",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "320:1:10",
                                "nodeType": "YulLiteral",
                                "src": "320:1:10",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "310:6:10",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:10"
                            },
                            "nativeSrc": "310:12:10",
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:10"
                          },
                          "nativeSrc": "310:12:10",
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:10"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "211:117:10",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "423:28:10",
                      "nodeType": "YulBlock",
                      "src": "423:28:10",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "440:1:10",
                                "nodeType": "YulLiteral",
                                "src": "440:1:10",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "443:1:10",
                                "nodeType": "YulLiteral",
                                "src": "443:1:10",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "433:6:10",
                              "nodeType": "YulIdentifier",
                              "src": "433:6:10"
                            },
                            "nativeSrc": "433:12:10",
                            "nodeType": "YulFunctionCall",
                            "src": "433:12:10"
                          },
                          "nativeSrc": "433:12:10",
                          "nodeType": "YulExpressionStatement",
                          "src": "433:12:10"
                        }
                      ]
                    },
                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    "nativeSrc": "334:117:10",
                    "nodeType": "YulFunctionDefinition",
                    "src": "334:117:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "555:169:10",
                      "nodeType": "YulBlock",
                      "src": "555:169:10",
                      "statements": [
                        {
                          "nativeSrc": "565:18:10",
                          "nodeType": "YulAssignment",
                          "src": "565:18:10",
                          "value": {
                            "name": "offset",
                            "nativeSrc": "577:6:10",
                            "nodeType": "YulIdentifier",
                            "src": "577:6:10"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nativeSrc": "565:8:10",
                              "nodeType": "YulIdentifier",
                              "src": "565:8:10"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "635:83:10",
                            "nodeType": "YulBlock",
                            "src": "635:83:10",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nativeSrc": "637:77:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "637:77:10"
                                  },
                                  "nativeSrc": "637:79:10",
                                  "nodeType": "YulFunctionCall",
                                  "src": "637:79:10"
                                },
                                "nativeSrc": "637:79:10",
                                "nodeType": "YulExpressionStatement",
                                "src": "637:79:10"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "arrayPos",
                                    "nativeSrc": "602:8:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "602:8:10"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "616:4:10",
                                        "nodeType": "YulLiteral",
                                        "src": "616:4:10",
                                        "type": "",
                                        "value": "0x02"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "622:4:10",
                                        "nodeType": "YulLiteral",
                                        "src": "622:4:10",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "612:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "612:3:10"
                                    },
                                    "nativeSrc": "612:15:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "612:15:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "598:3:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "598:3:10"
                                },
                                "nativeSrc": "598:30:10",
                                "nodeType": "YulFunctionCall",
                                "src": "598:30:10"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "630:3:10",
                                "nodeType": "YulIdentifier",
                                "src": "630:3:10"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "595:2:10",
                              "nodeType": "YulIdentifier",
                              "src": "595:2:10"
                            },
                            "nativeSrc": "595:39:10",
                            "nodeType": "YulFunctionCall",
                            "src": "595:39:10"
                          },
                          "nativeSrc": "592:126:10",
                          "nodeType": "YulIf",
                          "src": "592:126:10"
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_uint256_$2_calldata_ptr",
                    "nativeSrc": "475:249:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "530:6:10",
                        "nodeType": "YulTypedName",
                        "src": "530:6:10",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "538:3:10",
                        "nodeType": "YulTypedName",
                        "src": "538:3:10",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nativeSrc": "546:8:10",
                        "nodeType": "YulTypedName",
                        "src": "546:8:10",
                        "type": ""
                      }
                    ],
                    "src": "475:249:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "856:169:10",
                      "nodeType": "YulBlock",
                      "src": "856:169:10",
                      "statements": [
                        {
                          "nativeSrc": "866:18:10",
                          "nodeType": "YulAssignment",
                          "src": "866:18:10",
                          "value": {
                            "name": "offset",
                            "nativeSrc": "878:6:10",
                            "nodeType": "YulIdentifier",
                            "src": "878:6:10"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nativeSrc": "866:8:10",
                              "nodeType": "YulIdentifier",
                              "src": "866:8:10"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "936:83:10",
                            "nodeType": "YulBlock",
                            "src": "936:83:10",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nativeSrc": "938:77:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "938:77:10"
                                  },
                                  "nativeSrc": "938:79:10",
                                  "nodeType": "YulFunctionCall",
                                  "src": "938:79:10"
                                },
                                "nativeSrc": "938:79:10",
                                "nodeType": "YulExpressionStatement",
                                "src": "938:79:10"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "arrayPos",
                                    "nativeSrc": "903:8:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "903:8:10"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "917:4:10",
                                        "nodeType": "YulLiteral",
                                        "src": "917:4:10",
                                        "type": "",
                                        "value": "0x02"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "923:4:10",
                                        "nodeType": "YulLiteral",
                                        "src": "923:4:10",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "913:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "913:3:10"
                                    },
                                    "nativeSrc": "913:15:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "913:15:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "899:3:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "899:3:10"
                                },
                                "nativeSrc": "899:30:10",
                                "nodeType": "YulFunctionCall",
                                "src": "899:30:10"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "931:3:10",
                                "nodeType": "YulIdentifier",
                                "src": "931:3:10"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "896:2:10",
                              "nodeType": "YulIdentifier",
                              "src": "896:2:10"
                            },
                            "nativeSrc": "896:39:10",
                            "nodeType": "YulFunctionCall",
                            "src": "896:39:10"
                          },
                          "nativeSrc": "893:126:10",
                          "nodeType": "YulIf",
                          "src": "893:126:10"
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptr",
                    "nativeSrc": "751:274:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "831:6:10",
                        "nodeType": "YulTypedName",
                        "src": "831:6:10",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "839:3:10",
                        "nodeType": "YulTypedName",
                        "src": "839:3:10",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nativeSrc": "847:8:10",
                        "nodeType": "YulTypedName",
                        "src": "847:8:10",
                        "type": ""
                      }
                    ],
                    "src": "751:274:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "1129:169:10",
                      "nodeType": "YulBlock",
                      "src": "1129:169:10",
                      "statements": [
                        {
                          "nativeSrc": "1139:18:10",
                          "nodeType": "YulAssignment",
                          "src": "1139:18:10",
                          "value": {
                            "name": "offset",
                            "nativeSrc": "1151:6:10",
                            "nodeType": "YulIdentifier",
                            "src": "1151:6:10"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nativeSrc": "1139:8:10",
                              "nodeType": "YulIdentifier",
                              "src": "1139:8:10"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1209:83:10",
                            "nodeType": "YulBlock",
                            "src": "1209:83:10",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nativeSrc": "1211:77:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1211:77:10"
                                  },
                                  "nativeSrc": "1211:79:10",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1211:79:10"
                                },
                                "nativeSrc": "1211:79:10",
                                "nodeType": "YulExpressionStatement",
                                "src": "1211:79:10"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "arrayPos",
                                    "nativeSrc": "1176:8:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1176:8:10"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1190:4:10",
                                        "nodeType": "YulLiteral",
                                        "src": "1190:4:10",
                                        "type": "",
                                        "value": "0x01"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "1196:4:10",
                                        "nodeType": "YulLiteral",
                                        "src": "1196:4:10",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "1186:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "1186:3:10"
                                    },
                                    "nativeSrc": "1186:15:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1186:15:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1172:3:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "1172:3:10"
                                },
                                "nativeSrc": "1172:30:10",
                                "nodeType": "YulFunctionCall",
                                "src": "1172:30:10"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "1204:3:10",
                                "nodeType": "YulIdentifier",
                                "src": "1204:3:10"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1169:2:10",
                              "nodeType": "YulIdentifier",
                              "src": "1169:2:10"
                            },
                            "nativeSrc": "1169:39:10",
                            "nodeType": "YulFunctionCall",
                            "src": "1169:39:10"
                          },
                          "nativeSrc": "1166:126:10",
                          "nodeType": "YulIf",
                          "src": "1166:126:10"
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_uint256_$1_calldata_ptr",
                    "nativeSrc": "1049:249:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "1104:6:10",
                        "nodeType": "YulTypedName",
                        "src": "1104:6:10",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "1112:3:10",
                        "nodeType": "YulTypedName",
                        "src": "1112:3:10",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nativeSrc": "1120:8:10",
                        "nodeType": "YulTypedName",
                        "src": "1120:8:10",
                        "type": ""
                      }
                    ],
                    "src": "1049:249:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "1546:775:10",
                      "nodeType": "YulBlock",
                      "src": "1546:775:10",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1593:83:10",
                            "nodeType": "YulBlock",
                            "src": "1593:83:10",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "1595:77:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1595:77:10"
                                  },
                                  "nativeSrc": "1595:79:10",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1595:79:10"
                                },
                                "nativeSrc": "1595:79:10",
                                "nodeType": "YulExpressionStatement",
                                "src": "1595:79:10"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1567:7:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1567:7:10"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1576:9:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1576:9:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "1563:3:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "1563:3:10"
                                },
                                "nativeSrc": "1563:23:10",
                                "nodeType": "YulFunctionCall",
                                "src": "1563:23:10"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1588:3:10",
                                "nodeType": "YulLiteral",
                                "src": "1588:3:10",
                                "type": "",
                                "value": "288"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "1559:3:10",
                              "nodeType": "YulIdentifier",
                              "src": "1559:3:10"
                            },
                            "nativeSrc": "1559:33:10",
                            "nodeType": "YulFunctionCall",
                            "src": "1559:33:10"
                          },
                          "nativeSrc": "1556:120:10",
                          "nodeType": "YulIf",
                          "src": "1556:120:10"
                        },
                        {
                          "nativeSrc": "1686:142:10",
                          "nodeType": "YulBlock",
                          "src": "1686:142:10",
                          "statements": [
                            {
                              "nativeSrc": "1701:15:10",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1701:15:10",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1715:1:10",
                                "nodeType": "YulLiteral",
                                "src": "1715:1:10",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "1705:6:10",
                                  "nodeType": "YulTypedName",
                                  "src": "1705:6:10",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1730:88:10",
                              "nodeType": "YulAssignment",
                              "src": "1730:88:10",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1790:9:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "1790:9:10"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1801:6:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "1801:6:10"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1786:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "1786:3:10"
                                    },
                                    "nativeSrc": "1786:22:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1786:22:10"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1810:7:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1810:7:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_uint256_$2_calldata_ptr",
                                  "nativeSrc": "1740:45:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "1740:45:10"
                                },
                                "nativeSrc": "1740:78:10",
                                "nodeType": "YulFunctionCall",
                                "src": "1740:78:10"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "1730:6:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "1730:6:10"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1838:168:10",
                          "nodeType": "YulBlock",
                          "src": "1838:168:10",
                          "statements": [
                            {
                              "nativeSrc": "1853:16:10",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1853:16:10",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1867:2:10",
                                "nodeType": "YulLiteral",
                                "src": "1867:2:10",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "1857:6:10",
                                  "nodeType": "YulTypedName",
                                  "src": "1857:6:10",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1883:113:10",
                              "nodeType": "YulAssignment",
                              "src": "1883:113:10",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1968:9:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "1968:9:10"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1979:6:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "1979:6:10"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1964:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "1964:3:10"
                                    },
                                    "nativeSrc": "1964:22:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1964:22:10"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1988:7:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "1988:7:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptr",
                                  "nativeSrc": "1893:70:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "1893:70:10"
                                },
                                "nativeSrc": "1893:103:10",
                                "nodeType": "YulFunctionCall",
                                "src": "1893:103:10"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "1883:6:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "1883:6:10"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2016:144:10",
                          "nodeType": "YulBlock",
                          "src": "2016:144:10",
                          "statements": [
                            {
                              "nativeSrc": "2031:17:10",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2031:17:10",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "2045:3:10",
                                "nodeType": "YulLiteral",
                                "src": "2045:3:10",
                                "type": "",
                                "value": "192"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "2035:6:10",
                                  "nodeType": "YulTypedName",
                                  "src": "2035:6:10",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2062:88:10",
                              "nodeType": "YulAssignment",
                              "src": "2062:88:10",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2122:9:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "2122:9:10"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2133:6:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "2133:6:10"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2118:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "2118:3:10"
                                    },
                                    "nativeSrc": "2118:22:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2118:22:10"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2142:7:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "2142:7:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_uint256_$2_calldata_ptr",
                                  "nativeSrc": "2072:45:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2072:45:10"
                                },
                                "nativeSrc": "2072:78:10",
                                "nodeType": "YulFunctionCall",
                                "src": "2072:78:10"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nativeSrc": "2062:6:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2062:6:10"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2170:144:10",
                          "nodeType": "YulBlock",
                          "src": "2170:144:10",
                          "statements": [
                            {
                              "nativeSrc": "2185:17:10",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2185:17:10",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "2199:3:10",
                                "nodeType": "YulLiteral",
                                "src": "2199:3:10",
                                "type": "",
                                "value": "256"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "2189:6:10",
                                  "nodeType": "YulTypedName",
                                  "src": "2189:6:10",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2216:88:10",
                              "nodeType": "YulAssignment",
                              "src": "2216:88:10",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2276:9:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "2276:9:10"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2287:6:10",
                                        "nodeType": "YulIdentifier",
                                        "src": "2287:6:10"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2272:3:10",
                                      "nodeType": "YulIdentifier",
                                      "src": "2272:3:10"
                                    },
                                    "nativeSrc": "2272:22:10",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2272:22:10"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2296:7:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "2296:7:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_uint256_$1_calldata_ptr",
                                  "nativeSrc": "2226:45:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2226:45:10"
                                },
                                "nativeSrc": "2226:78:10",
                                "nodeType": "YulFunctionCall",
                                "src": "2226:78:10"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nativeSrc": "2216:6:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2216:6:10"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint256_$2_calldata_ptrt_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptrt_array$_t_uint256_$2_calldata_ptrt_array$_t_uint256_$1_calldata_ptr",
                    "nativeSrc": "1304:1017:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1492:9:10",
                        "nodeType": "YulTypedName",
                        "src": "1492:9:10",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "1503:7:10",
                        "nodeType": "YulTypedName",
                        "src": "1503:7:10",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "1515:6:10",
                        "nodeType": "YulTypedName",
                        "src": "1515:6:10",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "1523:6:10",
                        "nodeType": "YulTypedName",
                        "src": "1523:6:10",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "1531:6:10",
                        "nodeType": "YulTypedName",
                        "src": "1531:6:10",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "1539:6:10",
                        "nodeType": "YulTypedName",
                        "src": "1539:6:10",
                        "type": ""
                      }
                    ],
                    "src": "1304:1017:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "2369:48:10",
                      "nodeType": "YulBlock",
                      "src": "2369:48:10",
                      "statements": [
                        {
                          "nativeSrc": "2379:32:10",
                          "nodeType": "YulAssignment",
                          "src": "2379:32:10",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2404:5:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "2404:5:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "2397:6:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2397:6:10"
                                },
                                "nativeSrc": "2397:13:10",
                                "nodeType": "YulFunctionCall",
                                "src": "2397:13:10"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2390:6:10",
                              "nodeType": "YulIdentifier",
                              "src": "2390:6:10"
                            },
                            "nativeSrc": "2390:21:10",
                            "nodeType": "YulFunctionCall",
                            "src": "2390:21:10"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "2379:7:10",
                              "nodeType": "YulIdentifier",
                              "src": "2379:7:10"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nativeSrc": "2327:90:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2351:5:10",
                        "nodeType": "YulTypedName",
                        "src": "2351:5:10",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "2361:7:10",
                        "nodeType": "YulTypedName",
                        "src": "2361:7:10",
                        "type": ""
                      }
                    ],
                    "src": "2327:90:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "2482:50:10",
                      "nodeType": "YulBlock",
                      "src": "2482:50:10",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2499:3:10",
                                "nodeType": "YulIdentifier",
                                "src": "2499:3:10"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2519:5:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "2519:5:10"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nativeSrc": "2504:14:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2504:14:10"
                                },
                                "nativeSrc": "2504:21:10",
                                "nodeType": "YulFunctionCall",
                                "src": "2504:21:10"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2492:6:10",
                              "nodeType": "YulIdentifier",
                              "src": "2492:6:10"
                            },
                            "nativeSrc": "2492:34:10",
                            "nodeType": "YulFunctionCall",
                            "src": "2492:34:10"
                          },
                          "nativeSrc": "2492:34:10",
                          "nodeType": "YulExpressionStatement",
                          "src": "2492:34:10"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nativeSrc": "2423:109:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2470:5:10",
                        "nodeType": "YulTypedName",
                        "src": "2470:5:10",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "2477:3:10",
                        "nodeType": "YulTypedName",
                        "src": "2477:3:10",
                        "type": ""
                      }
                    ],
                    "src": "2423:109:10"
                  },
                  {
                    "body": {
                      "nativeSrc": "2630:118:10",
                      "nodeType": "YulBlock",
                      "src": "2630:118:10",
                      "statements": [
                        {
                          "nativeSrc": "2640:26:10",
                          "nodeType": "YulAssignment",
                          "src": "2640:26:10",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2652:9:10",
                                "nodeType": "YulIdentifier",
                                "src": "2652:9:10"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2663:2:10",
                                "nodeType": "YulLiteral",
                                "src": "2663:2:10",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2648:3:10",
                              "nodeType": "YulIdentifier",
                              "src": "2648:3:10"
                            },
                            "nativeSrc": "2648:18:10",
                            "nodeType": "YulFunctionCall",
                            "src": "2648:18:10"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2640:4:10",
                              "nodeType": "YulIdentifier",
                              "src": "2640:4:10"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "2714:6:10",
                                "nodeType": "YulIdentifier",
                                "src": "2714:6:10"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2727:9:10",
                                    "nodeType": "YulIdentifier",
                                    "src": "2727:9:10"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2738:1:10",
                                    "nodeType": "YulLiteral",
                                    "src": "2738:1:10",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2723:3:10",
                                  "nodeType": "YulIdentifier",
                                  "src": "2723:3:10"
                                },
                                "nativeSrc": "2723:17:10",
                                "nodeType": "YulFunctionCall",
                                "src": "2723:17:10"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nativeSrc": "2676:37:10",
                              "nodeType": "YulIdentifier",
                              "src": "2676:37:10"
                            },
                            "nativeSrc": "2676:65:10",
                            "nodeType": "YulFunctionCall",
                            "src": "2676:65:10"
                          },
                          "nativeSrc": "2676:65:10",
                          "nodeType": "YulExpressionStatement",
                          "src": "2676:65:10"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "2538:210:10",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2602:9:10",
                        "nodeType": "YulTypedName",
                        "src": "2602:9:10",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2614:6:10",
                        "nodeType": "YulTypedName",
                        "src": "2614:6:10",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2625:4:10",
                        "nodeType": "YulTypedName",
                        "src": "2625:4:10",
                        "type": ""
                      }
                    ],
                    "src": "2538:210:10"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // uint256[2]\n    function abi_decode_t_array$_t_uint256_$2_calldata_ptr(offset, end) -> arrayPos {\n        arrayPos := offset\n        if gt(add(arrayPos, mul(0x02, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    // uint256[2][2]\n    function abi_decode_t_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptr(offset, end) -> arrayPos {\n        arrayPos := offset\n        if gt(add(arrayPos, mul(0x02, 0x40)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    // uint256[1]\n    function abi_decode_t_array$_t_uint256_$1_calldata_ptr(offset, end) -> arrayPos {\n        arrayPos := offset\n        if gt(add(arrayPos, mul(0x01, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$2_calldata_ptrt_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptrt_array$_t_uint256_$2_calldata_ptrt_array$_t_uint256_$1_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 288) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_array$_t_uint256_$2_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value1 := abi_decode_t_array$_t_array$_t_uint256_$2_calldata_ptr_$2_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value2 := abi_decode_t_array$_t_uint256_$2_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 256\n\n            value3 := abi_decode_t_array$_t_uint256_$1_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
              "id": 10,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f0476e0f39a71253c7d22522f38c0b77bb7185baed23dbeaaa0d6b9cbb055b50781527f21f0783ef18bd57e76fcd22cdadc1f0d2c930cf1d3a3060adb0c469d0d237ef760208201526101a960008801357f2e04fe98a7220dab24fa435c95b7f14e092d2dc17484ed95cac72109b8beca367f2c4e7903a89183bc593a63e761c390944a576ff6a92ad2e2755105a16e3d89478461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f12d62daa1d711c0ed6155171ce764f91f64db1c9d54953369fc5a00efe779be560c08301527f179173cc819d3c2559f22761e759b5cd80737fdc209ade9fe7ef7cc927c3b38560e08301527f30601bbe058fb1fb7d66ecb440bdb41e3c24ccbf0b8423f9a8439d965fc7c3346101008301527f2a39fc98d850754027794bdf02b4ea6511d395c965a83f762d472855e0c58be96101208301527f121b9969a31c13720093cec576f9f67ecdeb95dc7b0a8a0dc9fc4f5122967a876101408301527f1aedb1b574d9124fb62e355f3a553989bd7242e2395d13cac0d0d48b3ea3560f610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0f941f46d4414d627baa603b4e02d3228de9ad1a96dd4c9c14af92058f7a62c36102808301527f095217b374207aa5bddf6149503a1c1e7f57401a606d74f4bd1024a7cb0c81bc6102a08301527f23004453cf1454c42c99591bd1f987fba2570ed4611886a7d339184762fac5636102c08301527f155d01bad349070c66cf8e5bac25b358c24a30b5761d94125c75a0aef4090d716102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212202021ae0639f8b5e33688f45da4473cd162209312d76899906c4725a56d47af3f64736f6c63430008180033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x43753B4D EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x539 JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x48D JUMP JUMPDEST PUSH32 0x30644E72E131A029B85045B68181585D2833E84879B9709143E1F593F0000001 DUP2 LT PUSH2 0x98 JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE DUP5 PUSH1 0x20 DUP3 ADD MSTORE DUP6 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x40 DUP2 PUSH1 0x60 DUP4 PUSH1 0x7 PUSH2 0x7D0 GAS SUB STATICCALL SWAP2 POP DUP2 PUSH2 0xCE JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST DUP3 MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x40 DUP4 PUSH1 0x80 DUP4 PUSH1 0x6 PUSH2 0x7D0 GAS SUB STATICCALL SWAP2 POP DUP2 PUSH2 0xFE JUMPI PUSH1 0x0 DUP1 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP7 ADD PUSH1 0x0 DUP8 ADD PUSH32 0x476E0F39A71253C7D22522F38C0B77BB7185BAED23DBEAAA0D6B9CBB055B507 DUP2 MSTORE PUSH32 0x21F0783EF18BD57E76FCD22CDADC1F0D2C930CF1D3A3060ADB0C469D0D237EF7 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1A9 PUSH1 0x0 DUP9 ADD CALLDATALOAD PUSH32 0x2E04FE98A7220DAB24FA435C95B7F14E092D2DC17484ED95CAC72109B8BECA36 PUSH32 0x2C4E7903A89183BC593A63E761C390944A576FF6A92AD2E2755105A16E3D8947 DUP5 PUSH2 0x9B JUMP JUMPDEST DUP4 CALLDATALOAD DUP3 MSTORE PUSH32 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD47 PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH32 0x30644E72E131A029B85045B68181585D97816A916871CA8D3C208C16D87CFD47 SUB MOD PUSH1 0x20 DUP4 ADD MSTORE DUP5 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH32 0x12D62DAA1D711C0ED6155171CE764F91F64DB1C9D54953369FC5A00EFE779BE5 PUSH1 0xC0 DUP4 ADD MSTORE PUSH32 0x179173CC819D3C2559F22761E759B5CD80737FDC209ADE9FE7EF7CC927C3B385 PUSH1 0xE0 DUP4 ADD MSTORE PUSH32 0x30601BBE058FB1FB7D66ECB440BDB41E3C24CCBF0B8423F9A8439D965FC7C334 PUSH2 0x100 DUP4 ADD MSTORE PUSH32 0x2A39FC98D850754027794BDF02B4EA6511D395C965A83F762D472855E0C58BE9 PUSH2 0x120 DUP4 ADD MSTORE PUSH32 0x121B9969A31C13720093CEC576F9F67ECDEB95DC7B0A8A0DC9FC4F5122967A87 PUSH2 0x140 DUP4 ADD MSTORE PUSH32 0x1AEDB1B574D9124FB62E355F3A553989BD7242E2395D13CAC0D0D48B3EA3560F PUSH2 0x160 DUP4 ADD MSTORE PUSH1 0x0 DUP9 ADD MLOAD PUSH2 0x180 DUP4 ADD MSTORE PUSH1 0x20 PUSH1 0x0 ADD DUP9 ADD MLOAD PUSH2 0x1A0 DUP4 ADD MSTORE PUSH32 0x198E9393920D483A7260BFB731FB5D25F1AA493335A9E71297E485B7AEF312C2 PUSH2 0x1C0 DUP4 ADD MSTORE PUSH32 0x1800DEEF121F1E76426A00665E5C4479674322D4F75EDADD46DEBD5CD992F6ED PUSH2 0x1E0 DUP4 ADD MSTORE PUSH32 0x90689D0585FF075EC9E99AD690C3395BC4B313370B38EF355ACDADCD122975B PUSH2 0x200 DUP4 ADD MSTORE PUSH32 0x12C85EA5DB8C6DEB4AAB71808DCB408FE3D1E7690C43D37B4CE6CC0166FA7DAA PUSH2 0x220 DUP4 ADD MSTORE DUP6 CALLDATALOAD PUSH2 0x240 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x260 DUP4 ADD MSTORE PUSH32 0xF941F46D4414D627BAA603B4E02D3228DE9AD1A96DD4C9C14AF92058F7A62C3 PUSH2 0x280 DUP4 ADD MSTORE PUSH32 0x95217B374207AA5BDDF6149503A1C1E7F57401A606D74F4BD1024A7CB0C81BC PUSH2 0x2A0 DUP4 ADD MSTORE PUSH32 0x23004453CF1454C42C99591BD1F987FBA2570ED4611886A7D339184762FAC563 PUSH2 0x2C0 DUP4 ADD MSTORE PUSH32 0x155D01BAD349070C66CF8E5BAC25B358C24A30B5761D94125C75A0AEF4090D71 PUSH2 0x2E0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 PUSH2 0x300 DUP5 PUSH1 0x8 PUSH2 0x7D0 GAS SUB STATICCALL DUP3 MLOAD DUP2 AND SWAP4 POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x380 DUP2 ADD PUSH1 0x40 MSTORE PUSH2 0x4A5 PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH2 0x67 JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x67 JUMP JUMPDEST PUSH2 0x4BF DUP2 DUP5 DUP7 DUP9 DUP11 PUSH2 0x106 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP3 PUSH1 0x20 PUSH1 0x2 MUL DUP3 ADD GT ISZERO PUSH2 0x4EF JUMPI PUSH2 0x4EE PUSH2 0x4CE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP3 PUSH1 0x40 PUSH1 0x2 MUL DUP3 ADD GT ISZERO PUSH2 0x511 JUMPI PUSH2 0x510 PUSH2 0x4CE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP3 PUSH1 0x20 PUSH1 0x1 MUL DUP3 ADD GT ISZERO PUSH2 0x533 JUMPI PUSH2 0x532 PUSH2 0x4CE JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x554 JUMPI PUSH2 0x553 PUSH2 0x4C9 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x562 DUP8 DUP3 DUP9 ADD PUSH2 0x4D3 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0x573 DUP8 DUP3 DUP9 ADD PUSH2 0x4F5 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xC0 PUSH2 0x584 DUP8 DUP3 DUP9 ADD PUSH2 0x4D3 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x100 PUSH2 0x596 DUP8 DUP3 DUP9 ADD PUSH2 0x517 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5B7 DUP2 PUSH2 0x5A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5D2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0x21 0xAE MOD CODECOPY 0xF8 0xB5 0xE3 CALLDATASIZE DUP9 DELEGATECALL TSTORE LOG4 SELFBALANCE EXTCODECOPY 0xD1 PUSH3 0x209312 0xD7 PUSH9 0x99906C4725A56D47AF EXTCODEHASH PUSH5 0x736F6C6343 STOP ADDMOD XOR STOP CALLER ",
          "sourceMap": "831:6299:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3246:3881;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;3387:4;3426:163;;;3483:1;3480;3477:8;3467:108;;3519:1;3516;3509:12;3552:4;3549:1;3542:15;3467:108;3426:163;:::o;3693:738::-;3744:11;3789:4;3783:11;3823:1;3818:3;3811:14;3863:1;3858:2;3853:3;3849:12;3842:23;3903:1;3898:2;3893:3;3889:12;3882:23;3980:2;3975:3;3971:2;3966:3;3963:1;3956:4;3949:5;3945:16;3934:49;3923:60;;4011:7;4001:107;;4052:1;4049;4042:12;4085:4;4082:1;4075:15;4001:107;4153:2;4147:9;4142:2;4137:3;4133:12;4126:31;4209:2;4205;4201:11;4195:18;4190:2;4185:3;4181:12;4174:40;4289:2;4285;4280:3;4275;4272:1;4265:4;4258:5;4254:16;4243:49;4232:60;;4320:7;4310:107;;4361:1;4358;4351:12;4394:4;4391:1;4384:15;4310:107;3726:705;;3693:738;;;;:::o;4445:2197::-;4500:4;4550:8;4544:4;4540:19;4598:3;4592:4;4588:14;4633:4;4627;4620:18;4677:4;4672:2;4666:4;4662:13;4655:27;4772:62;4830:1;4818:10;4814:18;4801:32;4795:4;4789;4783;4772:62;:::i;:::-;4922:2;4909:16;4898:9;4891:35;5009:1;5002:2;4998;4994:11;4981:25;4978:1;4974:33;4970:41;4965:2;4954:9;4950:18;4943:69;5091:2;5078:16;5073:2;5062:9;5058:18;5051:44;5160:2;5156;5152:11;5139:25;5134:2;5123:9;5119:18;5112:53;5231:2;5227;5223:11;5210:25;5204:3;5193:9;5189:19;5182:54;5302:2;5298;5294:11;5281:25;5275:3;5264:9;5260:19;5253:54;5379:6;5373:3;5362:9;5358:19;5351:35;5431:6;5425:3;5414:9;5410:19;5403:35;5509:6;5503:3;5492:9;5488:19;5481:35;5561:6;5555:3;5544:9;5540:19;5533:35;5613:6;5607:3;5596:9;5592:19;5585:35;5665:6;5659:3;5648:9;5644:19;5637:35;5758:3;5752:4;5748:14;5742:21;5736:3;5725:9;5721:19;5714:50;5834:2;5829:3;5825:12;5819:4;5815:23;5809:30;5803:3;5792:9;5788:19;5781:59;5913:7;5907:3;5896:9;5892:19;5885:36;5966:7;5960:3;5949:9;5945:19;5938:36;6019:7;6013:3;6002:9;5998:19;5991:36;6072:7;6066:3;6055:9;6051:19;6044:36;6160:2;6147:16;6141:3;6130:9;6126:19;6119:45;6230:2;6226;6222:11;6209:25;6203:3;6192:9;6188:19;6181:54;6307:7;6301:3;6290:9;6286:19;6279:36;6360:7;6354:3;6343:9;6339:19;6332:36;6413:7;6407:3;6396:9;6392:19;6385:36;6466:7;6460:3;6449:9;6445:19;6438:36;6567:4;6556:9;6551:3;6540:9;6537:1;6530:4;6523:5;6519:16;6508:64;6617:9;6611:16;6602:7;6598:30;6590:38;;4505:2137;;;4445:2197;;;;;;;:::o;:::-;6674:4;6668:11;6715:8;6709:4;6705:19;6699:4;6692:33;6803:45;6844:1;6831:11;6827:19;6814:33;6803:45;:::i;:::-;6874:46;6915:2;6902:11;6898:20;6885:34;6874:46;:::i;:::-;7002;7043:4;7030:11;7025:3;7020;7015;7002:46;:::i;:::-;7072:7;7069:1;7062:18;7104:4;7101:1;7094:15;88:117:10;197:1;194;187:12;334:117;443:1;440;433:12;475:249;546:8;577:6;565:18;;630:3;622:4;616;612:15;602:8;598:30;595:39;592:126;;;637:79;;:::i;:::-;592:126;475:249;;;;:::o;751:274::-;847:8;878:6;866:18;;931:3;923:4;917;913:15;903:8;899:30;896:39;893:126;;;938:79;;:::i;:::-;893:126;751:274;;;;:::o;1049:249::-;1120:8;1151:6;1139:18;;1204:3;1196:4;1190;1186:15;1176:8;1172:30;1169:39;1166:126;;;1211:79;;:::i;:::-;1166:126;1049:249;;;;:::o;1304:1017::-;1515:6;1523;1531;1539;1588:3;1576:9;1567:7;1563:23;1559:33;1556:120;;;1595:79;;:::i;:::-;1556:120;1715:1;1740:78;1810:7;1801:6;1790:9;1786:22;1740:78;:::i;:::-;1730:88;;1686:142;1867:2;1893:103;1988:7;1979:6;1968:9;1964:22;1893:103;:::i;:::-;1883:113;;1838:168;2045:3;2072:78;2142:7;2133:6;2122:9;2118:22;2072:78;:::i;:::-;2062:88;;2016:144;2199:3;2226:78;2296:7;2287:6;2276:9;2272:22;2226:78;:::i;:::-;2216:88;;2170:144;1304:1017;;;;;;;:::o;2327:90::-;2361:7;2404:5;2397:13;2390:21;2379:32;;2327:90;;;:::o;2423:109::-;2504:21;2519:5;2504:21;:::i;:::-;2499:3;2492:34;2423:109;;:::o;2538:210::-;2625:4;2663:2;2652:9;2648:18;2640:26;;2676:65;2738:1;2727:9;2723:17;2714:6;2676:65;:::i;:::-;2538:210;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "310000",
            "executionCost": "349",
            "totalCost": "310349"
          },
          "external": {
            "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])": "infinite"
          }
        },
        "methodIdentifiers": {
          "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])": "43753b4d"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[1]\",\"name\":\"_pubSignals\",\"type\":\"uint256[1]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 8520051711238495277756312842408984054078607383404182433465602324513039031269;\\n    uint256 constant alphay  = 10660187556116962003801728480854401614930141044912194564796528941280081982341;\\n    uint256 constant betax1  = 21880825520342415894331615749501343252449963287023630310187176193649027826484;\\n    uint256 constant betax2  = 19099593283961394353445905949386861277935270491164058776183680118853992811497;\\n    uint256 constant betay1  = 8190394960410723695997905667706614973945380454356437372681334826258981616263;\\n    uint256 constant betay2  = 12180103318676655748904044209767780179915931015187874801384622243753784202767;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 7046401958022283549608627719459086688654238679670396594463810182303817818819;\\n    uint256 constant deltax2 = 4215860674787241570147433393800368758095775693650086093673058466172026782140;\\n    uint256 constant deltay1 = 15831421278649486837286160383961527551398091733451554547715672747759237776739;\\n    uint256 constant deltay2 = 9662898535820346105722964961725859281834732626556420680062756228053949025649;\\n\\n    \\n    uint256 constant IC0x = 2019291906690274365382132146870590915281749460182294654351123264640585676039;\\n    uint256 constant IC0y = 15351197205310697933538854876133480958821526259248257490352916844747289755383;\\n    \\n    uint256 constant IC1x = 20040414618656562957491250832578161133510181293599958966360715877758934026567;\\n    uint256 constant IC1y = 20815215582174507074462442201387269542303830324725864251986559888656739256886;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\",\"keccak256\":\"0x07f2c57380c792338915760a0278f7bcf934a5d4e1437a433c1f40f6d2734b42\",\"license\":\"GPL-3.0\"}},\"version\":1}",
      "storageLayout": {
        "storage": [],
        "types": null
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/BeTrusty.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Verifier.sol\\\";\\n\\ncontract BeTrusty {\\n    AggregatorV3Interface internal dataFeed;\\n    IERC20 internal token;\\n    Verifier internal verifier;\\n    uint256 public immutable PRICE_PROOF_ONCHAIN = 20e18; // equivale a 20\\n    address public owner;\\n\\n    // Mapping para almacenar que la prueba ya ha sido utilizada\\n    // Cuando el usuario decide hacer valida su \\\"reputacion\\\" on-chain\\n    // almacenamos aqui el secret generada en la primera ZKP\\n    mapping(uint256 => bool) public s_nullifierHash;\\n\\n    struct Proof {\\n        uint[2] a;\\n        uint[2][2] b;\\n        uint[2] c;\\n    }\\n\\n    // Scroll Seplia Address\\n    // ETH/USD 0x59F1ec1f10bD7eD9B938431086bC1D9e233ECf41\\n    // Verificar en : https://docs.chain.link/data-feeds/price-feeds/addresses?network=scroll&page=1\\n    constructor(address _verifier, address _token, address _feed) {\\n        dataFeed = AggregatorV3Interface(_feed);\\n        verifier = Verifier(_verifier);\\n        token = IERC20(_token);\\n        owner = msg.sender;\\n    }\\n\\n    // Función para solo validar la prueba\\n    function verifyBeTrusty(\\n        Proof memory proof,\\n        uint[1] memory pubSignals\\n    ) external view returns (bool) {\\n        return verifier.verifyProof(proof.a, proof.b, proof.c, pubSignals);\\n    }\\n\\n    // Función para solo validar la prueba\\n    function isProofNullified(\\n        uint[1] memory pubSignals\\n    ) external view returns (bool) {\\n        return s_nullifierHash[pubSignals[0]];\\n    }\\n\\n    // Función para validar la prueba y registrarla on-chain\\n    // Se deben pagar 20 USD = PRICE_PROOF_ONCHAIN\\n    function verifyAndRegisterBeTrusty(\\n        Proof memory proof,\\n        uint[1] memory pubSignals\\n    ) external payable {\\n        require(!s_nullifierHash[pubSignals[0]], \\\"Already nullified!\\\");\\n        //uint256 requiredETH = calculateRequiredETH();\\n        require(msg.value >= calculateRequiredETH(), \\\"Insufficient ETH sent\\\");\\n        require(\\n            verifier.verifyProof(proof.a, proof.b, proof.c, pubSignals),\\n            \\\"Proof invalid\\\"\\n        );\\n        s_nullifierHash[pubSignals[0]] = true;\\n    }\\n\\n    // Función para calcular la cantidad de ETH equivalente a 20 USD\\n    // segun el precio de Ethereum\\n    function calculateRequiredETH() public view returns (uint256) {\\n        int price = getChainlinkDataFeedLatestAnswer();\\n        require(price > 0, \\\"Invalid price\\\");\\n        uint256 adjustedPrice = uint256(price) * 10 ** 10; // Ajustar decimales del precio a 18\\n        uint256 amountInETH = (PRICE_PROOF_ONCHAIN * 10 ** 18) / adjustedPrice; // Cantidad en WEI\\n        return amountInETH;\\n    }\\n\\n    // Convierte el valor en WEI devuelto en calculateRequiredETH()\\n    // a la cantidad en USDT que deberia dar siempre aprox 20 en 8 decimales\\n    function weiToUsd(uint256 _wei) public view returns (uint256) {\\n        return\\n            (_wei * uint256(getChainlinkDataFeedLatestAnswer())) / (10 ** 18); //\\n    }\\n\\n    // Retorna el precio de ETH/USD\\n    function getChainlinkDataFeedLatestAnswer() public view returns (int) {\\n        (, int answer, , uint timeStamp, ) = dataFeed.latestRoundData();\\n        require(timeStamp > 0, \\\"Round has not ended\\\");\\n        return answer;\\n    }\\n\\n    function undoNullified(uint[1] memory pubSignals) external onlyOwner {\\n        s_nullifierHash[pubSignals[0]] = false;\\n    }\\n\\n    function updateVerifier(address _verifier) external onlyOwner {\\n        verifier = Verifier(_verifier);\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n}\\n\"\n    },\n    \"contracts/Lock.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract Lock {\\n    uint public unlockTime;\\n    address payable public owner;\\n\\n    event Withdrawal(uint amount, uint when);\\n\\n    constructor(uint _unlockTime) payable {\\n        require(\\n            block.timestamp < _unlockTime,\\n            \\\"Unlock time should be in the future\\\"\\n        );\\n\\n        unlockTime = _unlockTime;\\n        owner = payable(msg.sender);\\n    }\\n\\n    function withdraw() public {\\n        // Uncomment this line, and the import of \\\"hardhat/console.sol\\\", to print a log in your terminal\\n        // console.log(\\\"Unlock time is %o and block timestamp is %o\\\", unlockTime, block.timestamp);\\n\\n        require(block.timestamp >= unlockTime, \\\"You can't withdraw yet\\\");\\n        require(msg.sender == owner, \\\"You aren't the owner\\\");\\n\\n        emit Withdrawal(address(this).balance, block.timestamp);\\n\\n        owner.transfer(address(this).balance);\\n    }\\n}\\n\"\n    },\n    \"contracts/MockUSDT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MockUSDT is ERC20 {\\n    constructor() ERC20(\\\"USD Tether\\\", \\\"USDT\\\") {\\n        _mint(msg.sender, 2_000_000 * 10 ** decimals());\\n    }\\n\\n    function faucet(uint256 _amount) external {\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    function decimals() public pure override returns (uint8){\\n        return 6;\\n    }\\n}\"\n    },\n    \"contracts/Verifier.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Verifier {\\n    // Scalar field size\\n    uint256 constant r    = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q   = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax  = 8520051711238495277756312842408984054078607383404182433465602324513039031269;\\n    uint256 constant alphay  = 10660187556116962003801728480854401614930141044912194564796528941280081982341;\\n    uint256 constant betax1  = 21880825520342415894331615749501343252449963287023630310187176193649027826484;\\n    uint256 constant betax2  = 19099593283961394353445905949386861277935270491164058776183680118853992811497;\\n    uint256 constant betay1  = 8190394960410723695997905667706614973945380454356437372681334826258981616263;\\n    uint256 constant betay2  = 12180103318676655748904044209767780179915931015187874801384622243753784202767;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 7046401958022283549608627719459086688654238679670396594463810182303817818819;\\n    uint256 constant deltax2 = 4215860674787241570147433393800368758095775693650086093673058466172026782140;\\n    uint256 constant deltay1 = 15831421278649486837286160383961527551398091733451554547715672747759237776739;\\n    uint256 constant deltay2 = 9662898535820346105722964961725859281834732626556420680062756228053949025649;\\n\\n    \\n    uint256 constant IC0x = 2019291906690274365382132146870590915281749460182294654351123264640585676039;\\n    uint256 constant IC0y = 15351197205310697933538854876133480958821526259248257490352916844747289755383;\\n    \\n    uint256 constant IC1x = 20040414618656562957491250832578161133510181293599958966360715877758934026567;\\n    uint256 constant IC1y = 20815215582174507074462442201387269542303830324725864251986559888656739256886;\\n    \\n \\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(uint[2] calldata _pA, uint[2][2] calldata _pB, uint[2] calldata _pC, uint[1] calldata _pubSignals) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, r)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n            \\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n                \\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n                \\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations ∈ F\\n            \\n            checkField(calldataload(add(_pubSignals, 0)))\\n            \\n            checkField(calldataload(add(_pubSignals, 32)))\\n            \\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n             return(0, 0x20)\\n         }\\n     }\\n }\"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"paris\",\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "d636fdba3de4929cdc79e6415226c89b",
      "transactionHash": "0x0f842383dee2cf04cf844b758f33fba8367d84c2c27ae437bab8cbffadb2f117",
      "args": []
    },
    "decoded": {
      "from": "0xa08A9F51475B42d8F15b28bD91918221Ee71bf8F",
      "gasPrice": "100000000",
      "gasLimit": "10000000",
      "to": null,
      "value": "0",
      "nonce": 2,
      "data": "0x608060405234801561001057600080fd5b5061060e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806343753b4d14610030575b600080fd5b61004a60048036038101906100459190610539565b610060565b60405161005791906105bd565b60405180910390f35b600061048d565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f0476e0f39a71253c7d22522f38c0b77bb7185baed23dbeaaa0d6b9cbb055b50781527f21f0783ef18bd57e76fcd22cdadc1f0d2c930cf1d3a3060adb0c469d0d237ef760208201526101a960008801357f2e04fe98a7220dab24fa435c95b7f14e092d2dc17484ed95cac72109b8beca367f2c4e7903a89183bc593a63e761c390944a576ff6a92ad2e2755105a16e3d89478461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f12d62daa1d711c0ed6155171ce764f91f64db1c9d54953369fc5a00efe779be560c08301527f179173cc819d3c2559f22761e759b5cd80737fdc209ade9fe7ef7cc927c3b38560e08301527f30601bbe058fb1fb7d66ecb440bdb41e3c24ccbf0b8423f9a8439d965fc7c3346101008301527f2a39fc98d850754027794bdf02b4ea6511d395c965a83f762d472855e0c58be96101208301527f121b9969a31c13720093cec576f9f67ecdeb95dc7b0a8a0dc9fc4f5122967a876101408301527f1aedb1b574d9124fb62e355f3a553989bd7242e2395d13cac0d0d48b3ea3560f610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f0f941f46d4414d627baa603b4e02d3228de9ad1a96dd4c9c14af92058f7a62c36102808301527f095217b374207aa5bddf6149503a1c1e7f57401a606d74f4bd1024a7cb0c81bc6102a08301527f23004453cf1454c42c99591bd1f987fba2570ed4611886a7d339184762fac5636102c08301527f155d01bad349070c66cf8e5bac25b358c24a30b5761d94125c75a0aef4090d716102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526104a56000840135610067565b6104b26020840135610067565b6104bf818486888a610106565b8060005260206000f35b600080fd5b600080fd5b6000819050826020600202820111156104ef576104ee6104ce565b5b92915050565b600081905082604060020282011115610511576105106104ce565b5b92915050565b600081905082602060010282011115610533576105326104ce565b5b92915050565b6000806000806101208587031215610554576105536104c9565b5b6000610562878288016104d3565b9450506040610573878288016104f5565b93505060c0610584878288016104d3565b92505061010061059687828801610517565b91505092959194509250565b60008115159050919050565b6105b7816105a2565b82525050565b60006020820190506105d260008301846105ae565b9291505056fea26469706673582212202021ae0639f8b5e33688f45da4473cd162209312d76899906c4725a56d47af3f64736f6c63430008180033",
      "r": "0xe7b32013d0f6cc038be0b3c90050e5fcc83a9bea4685bb705b3bd9f7918b2ff5",
      "s": "0x4f6c4ed1cd2a23799a7652820ce3beffd15725c82fff1d771bd299ffc7b128c8",
      "v": 1068737,
      "chainId": 534351
    }
  }
}